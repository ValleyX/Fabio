// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;

import com.ctre.phoenix.motorcontrol.ControlMode;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.ShooterDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class TakeShot extends CommandBase {
    private Joystick m_joystickDriver;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final ShooterDrive m_shooterDrive;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public TakeShot(ShooterDrive subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_shooterDrive = subsystem;
        addRequirements(m_shooterDrive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
                   //SmartDashboard.putString("Drive On Joystick ", "initialize");
                   double velocityRPM = SmartDashboard.getNumber("Velocity RPM", 4000);
                   SmartDashboard.putNumber("Velocity RPM got", velocityRPM);
                   m_shooterDrive.getLeftTalon().set(ControlMode.Velocity, velocityRPM);
                   m_shooterDrive.getRightTalon().set(ControlMode.Velocity, velocityRPM);
                  // m_shooterDrive.getLeftTalon().set(0.2);
                  // m_shooterDrive.getRightTalon().set(0.2);
                  
                 

    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
  
        SmartDashboard.putNumber("Velocity RPM meas", m_shooterDrive.getRightTalon().getSelectedSensorVelocity(0));
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {

        m_shooterDrive.getLeftTalon().set(ControlMode.Velocity, 0);
        m_shooterDrive.getRightTalon().set(ControlMode.Velocity, 0);
       m_shooterDrive.getLeftTalon().set(0);
       m_shooterDrive.getRightTalon().set(0);

    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
