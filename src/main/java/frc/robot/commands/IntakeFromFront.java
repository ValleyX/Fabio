// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.IntakeFront;
import edu.wpi.first.wpilibj.DigitalInput;
import com.ctre.phoenix.motorcontrol.ControlMode;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
//import frc.robot.subsystems.Sorter;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class IntakeFromFront extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final IntakeFront m_intakeFront;
        private final BeanBreakMid m_beanBreakMid;
        private final BeanBreakBack m_beanBreakBack;
        private final BeanBreakFront m_beanBreakFront;
        private final Sorter m_sorter;
 
        private final FrontIntakeArmSub m_frontIntakeArmSub;

        //private final FeederSystemBack m_feederSystemBack;
        private final Conveyor m_conveyor;
        private final FeederSystemFront m_feederSystemFront;
       // private final IntakeBack m_intakeBack;
        private final ShooterDrive m_shooterDrive;
        private final DriveTrain m_driveTrain;


        private double intakein = 1;
        private double intakeout = -1;
        private boolean everythingrun = false;
        private boolean frontIntakeEnable = false;
        private boolean shooton = false;


 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public IntakeFromFront(DriveTrain driveTrain, ShooterDrive shooterDrive, IntakeFront intakeFront, Conveyor conveyor,
    FeederSystemFront feederSystemFront, Sorter sorter, FrontIntakeArmSub frontIntakeArmSub, BeanBreakMid beanBreakMid,
    BeanBreakBack beanBreakBack, BeanBreakFront beanBreakFront) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_driveTrain = driveTrain;
        m_sorter = sorter;
        m_shooterDrive = shooterDrive;
        m_intakeFront = intakeFront;
        m_conveyor = conveyor;
        m_feederSystemFront = feederSystemFront;
        m_frontIntakeArmSub = frontIntakeArmSub;
        m_beanBreakMid = beanBreakMid;
        m_beanBreakBack = beanBreakBack;
        m_beanBreakFront = beanBreakFront;
        
        addRequirements(m_beanBreakBack);
        addRequirements(m_beanBreakMid);
        addRequirements(m_beanBreakFront);
        addRequirements(m_driveTrain);
        addRequirements(m_sorter);
        addRequirements(m_shooterDrive);
        addRequirements(m_intakeFront);
        addRequirements(m_conveyor);
        addRequirements(m_feederSystemFront);
        addRequirements(m_frontIntakeArmSub);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }


    public void PrimaryIntakeEnable()
    {
 
            m_frontIntakeArmSub.getFrontIntakeArm().set(true);
            m_intakeFront.getFrontIntakeMotor().set(intakein);
            m_feederSystemFront.getFeederFront().set(1);
            m_sorter.getSorter().set(1);
            m_conveyor.getConveyorMotor().set(1);
            frontIntakeEnable = true;
        
    }

    public void PrimaryIntakeDisable()
    {
      //  if (frontIntakeEnable == true)
        {
            m_frontIntakeArmSub.getFrontIntakeArm().set(false);
            m_intakeFront.getFrontIntakeMotor().set(0);
            m_feederSystemFront.getFeederFront().set(0);
            m_sorter.getSorter().set(0);
            m_conveyor.getConveyorMotor().set(0);
            frontIntakeEnable = false;
        }
    }




    // Called when the command is initially scheduled.
    @Override
    public void initialize() {

        
    }


    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() 
    {






        boolean beanBreakMid = m_beanBreakMid.getBeanBreakMid().get();
        boolean beanBreakFront = m_beanBreakFront.getBeanBreakFront().get();
        //boolean beanBreakBack = m_beanBreakBack.getBeanBreakBack().get();

            //When there is no ball in the middle turn everything on
            if (beanBreakMid == true ) // it is not broken
            {
                PrimaryIntakeEnable();
            }
            //when there is a ball in the shooter (there is a ball that tripped the middle), 
            //but there is not a second ball in the front turn off sorter and conveyor so that the ball doesnt get stuck 
            else if (beanBreakMid == false && beanBreakFront == true)
            {
                m_frontIntakeArmSub.getFrontIntakeArm().set(true);
                m_intakeFront.getFrontIntakeMotor().set(intakein);
                m_feederSystemFront.getFeederFront().set(1);
                m_sorter.getSorter().set(0);
                m_conveyor.getConveyorMotor().set(0);
            }
            else 
            {
                PrimaryIntakeDisable();
            }
          
        }





    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        PrimaryIntakeDisable();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        boolean beanBreakMid = m_beanBreakMid.getBeanBreakMid().get();
        if(beanBreakMid == false)
        {
            return true;
        }
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
