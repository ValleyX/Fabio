// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.CommandBase;
import com.ctre.phoenix.motorcontrol.ControlMode;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
//import frc.robot.subsystems.Sorter;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import frc.robot.subsystems.DriveTrain;
import frc.robot.subsystems.FeederSystemBack;
import frc.robot.subsystems.FeederSystemFront;
import frc.robot.subsystems.FrontIntakeArmSub;
import frc.robot.subsystems.BackIntakeArmSub;
import frc.robot.subsystems.Imu;
import frc.robot.subsystems.IntakeFront;
import frc.robot.subsystems.IntakeBack;
import frc.robot.subsystems.IntakeFrontArm;
import frc.robot.subsystems.ShooterDrive;
import frc.robot.subsystems.Sorter;
import frc.robot.subsystems.BeanBreakBack;
import frc.robot.subsystems.BeanBreakFront;
import frc.robot.subsystems.BeanBreakMid;
import frc.robot.commands.TakeSpeedShot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class JonCommand extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final Sorter m_sorter;
 
        private final FrontIntakeArmSub m_frontIntakeArmSub;
        private final BackIntakeArmSub m_backIntakeArmSub;

        private final FeederSystemBack m_feederSystemBack;
        private final Conveyor m_conveyor;
        private final FeederSystemFront m_feederSystemFront;
        private final IntakeBack m_intakeBack;
        private final IntakeFront m_intakeFront;
        private final ShooterDrive m_shooterDrive;
        private final DriveTrain m_driveTrain;
        private final BeanBreakMid m_beanBreakMid;
        private final BeanBreakBack m_beanBreakBack;
        private final BeanBreakFront m_beanBreakFront;

        private Joystick m_joystickDriver = new Joystick(0);
        private Joystick m_joystickManipulator = new Joystick(1);
 

        private double intakein = 1;
        private double intakeout = -1;
        private boolean everythingrun = false;
        private boolean frontIntakeEnable = false;
        private boolean shooton = false;
        private double velocityRPM;
 





    public JonCommand(DriveTrain driveTrain, ShooterDrive shooterDrive, IntakeFront intakeFront, IntakeBack intakeBack, Conveyor conveyor,
    FeederSystemFront feederSystemFront, FeederSystemBack feederSystemBack, Sorter sorter, FrontIntakeArmSub frontIntakeArmSub, BackIntakeArmSub backIntakeArmSub, BeanBreakMid beanBreakMid,
    BeanBreakBack beanBreakBack, BeanBreakFront beanBreakFront) {

        m_driveTrain = driveTrain;
        m_sorter = sorter;
        m_shooterDrive = shooterDrive;
        m_intakeFront = intakeFront;
        m_intakeBack = intakeBack;
        m_conveyor = conveyor;
        m_feederSystemFront = feederSystemFront;
        m_feederSystemBack = feederSystemBack;
        m_frontIntakeArmSub = frontIntakeArmSub;
        m_backIntakeArmSub = backIntakeArmSub;
        m_beanBreakMid = beanBreakMid;
        m_beanBreakBack = beanBreakBack;
        m_beanBreakFront = beanBreakFront;
        
        addRequirements(m_intakeBack);
        addRequirements(m_beanBreakBack);
        addRequirements(m_beanBreakMid);
        addRequirements(m_beanBreakFront);
        addRequirements(m_driveTrain);
        addRequirements(m_sorter);
        addRequirements(m_shooterDrive);
        addRequirements(m_intakeFront);
        addRequirements(m_conveyor);
        addRequirements(m_feederSystemFront);
        addRequirements(m_feederSystemBack);
        addRequirements(m_frontIntakeArmSub);
        addRequirements(m_backIntakeArmSub);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

       


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }



    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        SmartDashboard.putString("joncommand", "in init");


    }
    
    public void PrimaryIntakeEnable()
    {
       // if (frontIntakeEnable == false)
        {
            m_frontIntakeArmSub.getFrontIntakeArm().set(true);
            m_intakeFront.getFrontIntakeMotor().set(intakein);
            m_feederSystemFront.getFeederFront().set(1);
            m_sorter.getSorter().set(1);
            m_conveyor.getConveyorMotor().set(1);
            frontIntakeEnable = true;
        }
    }

    public void BackIntakeEnable()
    {
        m_backIntakeArmSub.getBackIntakeArm().set(true);
        m_intakeBack.getBackIntakeMotor().set(intakein);
        m_feederSystemBack.getFeederBack().set(1);
        m_sorter.getSorter().set(1);
        m_conveyor.getConveyorMotor().set(1);
    }
    
    public void PrimaryIntakeExpel()
    {
       // if (frontIntakeEnable == false)
        {
            m_intakeFront.getFrontIntakeMotor().set(-1);
            m_feederSystemFront.getFeederFront().set(-1);
            m_sorter.getSorter().set(-1);
            m_conveyor.getConveyorMotor().set(-1);
            frontIntakeEnable = true;
        }
    }

    public void PrimaryIntakeDisable()
    {
      //  if (frontIntakeEnable == true)
        {
            m_frontIntakeArmSub.getFrontIntakeArm().set(false);
            m_intakeFront.getFrontIntakeMotor().set(0);
            m_feederSystemFront.getFeederFront().set(0);
            m_sorter.getSorter().set(0);
            m_conveyor.getConveyorMotor().set(0);
            frontIntakeEnable = false;
        }
    }
    public void BackIntakeDisable()
    {
        m_backIntakeArmSub.getBackIntakeArm().set(false);
        m_intakeBack.getBackIntakeMotor().set(0);
        m_feederSystemBack.getFeederBack().set(0);
        m_sorter.getSorter().set(0);
        m_conveyor.getConveyorMotor().set(0);
    }

    public void shooteron(double direction)
    {
        //if (shooton == false)
        //{
            m_feederSystemFront.getFeederFront().set(1);
            m_sorter.getSorter().set(1);
            m_conveyor.getConveyorMotor().set(1);
            m_shooterDrive.getLeftTalon().set(0.5);
            m_shooterDrive.getRightTalon().set(0.5);
            shooton = true;
        //}
    }

    public void shooteroff()
    {
        //if (shooton == true)
        //{
            PrimaryIntakeDisable();
            m_shooterDrive.getLeftTalon().set(0.5);
            m_shooterDrive.getRightTalon().set(0.5);
            shooton = false;
     //  }
    }




    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {

		double leftYstick = m_joystickDriver.getRawAxis(1);  //left y stick
		double rightYstick = m_joystickDriver.getRawAxis(5);  //right y stick
        boolean buttonA = m_joystickManipulator.getRawButton(1); //button A
        boolean buttonB = m_joystickManipulator.getRawButton(2); //button B
        boolean buttonX = m_joystickManipulator.getRawButton(3); //button X
        boolean buttonY = m_joystickManipulator.getRawButton(4); //button Y
        boolean buttonlb = m_joystickManipulator.getRawButton(5);
        boolean buttonrb = m_joystickManipulator.getRawButton(6);

        boolean buttonReleaseA = m_joystickManipulator.getRawButtonReleased(1);
        boolean buttonReleaselb = m_joystickManipulator.getRawButtonReleased(5);
        boolean buttonReleaserb = m_joystickManipulator.getRawButtonReleased(6);

        boolean beanBreakMid = m_beanBreakMid.getBeanBreakMid().get();
        boolean beanBreakFront = m_beanBreakFront.getBeanBreakFront().get();
        boolean beanBreakBack = m_beanBreakBack.getBeanBreakBack().get();
        SmartDashboard.putNumber("Drive On Joystick leftYstick", leftYstick);
        SmartDashboard.putNumber("Drive On Joystick rightYstick", rightYstick);
        double velocityRPM = SmartDashboard.getNumber("Velocity RPM", 4000);
        SmartDashboard.putNumber("Velocity RPM got", velocityRPM);


        SmartDashboard.putBoolean("getBeanBreakMid", beanBreakMid);
        SmartDashboard.putBoolean("getBeanBreakFront", beanBreakFront);
        SmartDashboard.putBoolean("getBeanBreakBack", beanBreakBack);
        SmartDashboard.putBoolean("buttonA", buttonA);
        SmartDashboard.putBoolean("buttonB", buttonB);
        SmartDashboard.putBoolean("buttonX", buttonX);
        SmartDashboard.putBoolean("buttonY", buttonY);
        SmartDashboard.putBoolean("frontIntakeEnable", frontIntakeEnable);



        m_driveTrain.getDifferentialDrive().tankDrive(-leftYstick, -rightYstick);

        
        if (buttonA == true)
        {
            //When there is no ball in the middle turn everything on
            if (beanBreakMid == true ) // it is not broken
            {
                PrimaryIntakeEnable();
            }

            //when there is a ball in the shooter (there is a ball that tripped the middle), 
            //but there is not a second ball in the front turn off sorter and conveyor so that the ball doesnt get stuck 
            else if (beanBreakMid == false && beanBreakFront == true)
            {
                m_frontIntakeArmSub.getFrontIntakeArm().set(true);
                m_intakeFront.getFrontIntakeMotor().set(intakein);
                m_feederSystemFront.getFeederFront().set(1);
                m_sorter.getSorter().set(0);
                m_conveyor.getConveyorMotor().set(0);
            }
            else 
            {
                PrimaryIntakeDisable();
            }
          
        }

        else 
        {
            PrimaryIntakeDisable();
        }

    

        if (buttonB == true)
        {}



        if (buttonX == true)
        { 
            //new TakeSpeedShot(m_shooterDrive, 4000);
            
            velocityRPM = SmartDashboard.getNumber("Velocity RPM", 4000);
            SmartDashboard.putNumber("Velocity RPM got", velocityRPM);
            m_shooterDrive.getLeftTalon().set(ControlMode.Velocity, velocityRPM);
            m_shooterDrive.getRightTalon().set(ControlMode.Velocity, velocityRPM);

            if (velocityRPM >= 4000)
            {
                m_feederSystemFront.getFeederFront().set(1);
                m_conveyor.getConveyorMotor().set(1);
            }

            else
            {
                m_feederSystemFront.getFeederFront().set(0);
                m_conveyor.getConveyorMotor().set(0);
            }

        }
        else 
        {
            m_feederSystemFront.getFeederFront().set(0);
            m_conveyor.getConveyorMotor().set(0);
            m_shooterDrive.getLeftTalon().set(ControlMode.Velocity, 0);
            m_shooterDrive.getRightTalon().set(ControlMode.Velocity, 0);
        }

        if (buttonY == true)
        {
            /*
            double velocityRPM = SmartDashboard.getNumber("Velocity RPM", 4000);
            SmartDashboard.putNumber("Velocity RPM got", velocityRPM);
            m_shooterDrive.getLeftTalon().set(ControlMode.Velocity, velocityRPM);
            m_shooterDrive.getRightTalon().set(ControlMode.Velocity, velocityRPM);
            */

            m_shooterDrive.getLeftTalon().set(0);
            m_shooterDrive.getRightTalon().set(0);

        }

        if (buttonlb == true)
        {
            if (beanBreakMid == true ) // it is not broken
            {
                BackIntakeEnable();
            }

            //when there is a ball in the shooter (there is a ball that tripped the middle), 
            //but there is not a second ball in the front turn off sorter and conveyor so that the ball doesnt get stuck 
            else if (beanBreakMid == false && beanBreakFront == true)
            {
                m_backIntakeArmSub.getBackIntakeArm().set(true);
                m_intakeBack.getBackIntakeMotor().set(intakein);
                m_feederSystemBack.getFeederBack().set(1);
                m_sorter.getSorter().set(0);
                m_conveyor.getConveyorMotor().set(0);
            }
            else 
            {
                BackIntakeDisable();
            }
        }

        else if (buttonReleaselb) 
        {
            BackIntakeDisable();
        }

        if (buttonrb == true)
        {
            if (beanBreakMid == true ) // it is not broken
            {
                PrimaryIntakeEnable();
            }

            //when there is a ball in the shooter (there is a ball that tripped the middle), 
            //but there is not a second ball in the front turn off sorter and conveyor so that the ball doesnt get stuck 
            else if (beanBreakMid == false && beanBreakFront == true)
            {
                m_frontIntakeArmSub.getFrontIntakeArm().set(true);
                m_intakeFront.getFrontIntakeMotor().set(intakein);
                m_feederSystemFront.getFeederFront().set(1);
                m_sorter.getSorter().set(0);
                m_conveyor.getConveyorMotor().set(0);
            }
            else 
            {
                PrimaryIntakeDisable();
            }
        }

        else if (buttonReleaserb)
        {
            PrimaryIntakeDisable();
        }


        

    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_sorter.getSorter().set(0);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
