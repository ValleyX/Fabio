// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Climbers extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX climberMotorRight;
private WPI_TalonFX climberMotorLeft;
private Solenoid climberPivots;
public final double     LIFT_COUNTS_PER_MOTOR_REV    = 4096 ;    //  Talon Fx Inter encoder
public final double     LIFT_DRIVE_GEAR_REDUCTION    = 63.0;     //TODO builders find with force
public final double     LIFT_ONE_MOTOR_COUNT         = LIFT_COUNTS_PER_MOTOR_REV * LIFT_DRIVE_GEAR_REDUCTION;
public final double     LIFT_DISTANCE_IN_ONE_REV     = 1.5* Math.PI; // Winch diameter = 1.5
public final double     LIFT_COUNTS_PER_INCH         = LIFT_ONE_MOTOR_COUNT / LIFT_DISTANCE_IN_ONE_REV ; 

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Climbers() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
       climberMotorRight = new WPI_TalonFX(16);

       climberMotorLeft = new WPI_TalonFX(15);
 
        climberPivots = new Solenoid(17, PneumaticsModuleType.CTREPCM, 5);
        addChild("DeathClimbers", climberPivots);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    climberMotorLeft.setInverted(true);
    climberMotorRight.setInverted(false);

    /* Config Position Closed Loop gains in slot0, tsypically kF stays zero. */
    climberMotorLeft.config_kF(Constants.kPIDLoopIdx, 0, Constants.kTimeoutMs);
    climberMotorLeft.config_kP(Constants.kPIDLoopIdx, .125, Constants.kTimeoutMs);
    climberMotorLeft.config_kI(Constants.kPIDLoopIdx, .00025, Constants.kTimeoutMs);
    climberMotorLeft.config_kD(Constants.kPIDLoopIdx, 0, Constants.kTimeoutMs);

    climberMotorLeft.configAllowableClosedloopError(Constants.kPIDLoopIdx,0, Constants.kTimeoutMs);

    /* Config Position Closed Loop gains in slot0, tsypically kF stays zero. */
    climberMotorRight.config_kF(Constants.kPIDLoopIdx, 0, Constants.kTimeoutMs);
    climberMotorRight.config_kP(Constants.kPIDLoopIdx, .125, Constants.kTimeoutMs);
    climberMotorRight.config_kI(Constants.kPIDLoopIdx, .00025, Constants.kTimeoutMs);
    climberMotorRight.config_kD(Constants.kPIDLoopIdx, 0, Constants.kTimeoutMs);

    climberMotorRight.configAllowableClosedloopError(Constants.kPIDLoopIdx,0, Constants.kTimeoutMs);

    climberMotorLeft.setNeutralMode(NeutralMode.Brake);
    climberMotorRight.setNeutralMode(NeutralMode.Brake);
    

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public WPI_TalonFX getLeftTalon()
    {
        return climberMotorLeft;
    }

    public WPI_TalonFX getRightTalon()
    {
        return climberMotorRight;
    }
    
    public Solenoid getClimerPivots()
    {
        return climberPivots;
    }



    public void allpowerClimb(double power)
    {
        climberMotorLeft.set(power);
        climberMotorRight.set(power);

    }
    //In inches 
    public void goToDistance(double distance)
    {
       // climberMotorLeft.follow(climberMotorRight); //TODO play with later

        climberMotorLeft.set(ControlMode.Position, distance*LIFT_COUNTS_PER_INCH);
        climberMotorRight.set(ControlMode.Position, distance*LIFT_COUNTS_PER_INCH);
        
    }

    public void cancelClimb()
    {
        climberMotorLeft.set(ControlMode.Position,0);
        climberMotorRight.set(ControlMode.Position,0);
    }
    
    public boolean IsLeftClose(double value)
    {
        return Math.abs(climberMotorLeft.getClosedLoopError()) < value;
    }
    public boolean IsRightClose(double value)
    {
        return Math.abs(climberMotorRight.getClosedLoopError()) < value;
    }
  
}

